#include <iostream>
using namespace std;
//Quick sort implement in 2 steps
// first: partition  => that is mean to put the rigth number in rigth position 
int partition(int arr[] ,int start , int end){
	int low = start , high = end;
	int pvoit = low ;
	while(true){
		//left part
		while(arr[pvoit]<=arr[high] &pvoit != high)high--; //to move end 
		if(pvoit == high ) break;//Rigth pos not have to swap
		if(arr[pvoit] >= arr[high])//not pos
		{
			 swap(arr[end] , arr[pvoit]); pvoit=high;
		}
		//rigth part
		while(arr[pvoit]>=arr[low] &pvoit != low)low++; //to move start
		if(pvoit == low) break;
		if(arr[pvoit]< arr[low]) {
			swap(arr[low],arr[pvoit]);
			pvoit = low ;  
		} 
	}
	return pvoit;
}
void Quicksort(int arr[],int start , int end){
	if(start < end){
		int pos = partition(arr,start,end); //to sort the element 
		Quicksort(arr,start,pos-1);//to Recursion in left side 
		Quicksort(arr,pos+1,end);// to Recusion in rigth side 
	}
}
int main() 
{
	int arr[]={2,3,4,5,6,7,1};
	int size = sizeof(arr)/sizeof(arr[0]);
	Quicksort(arr,0,size-1);
	cout<<"After Quick Sort the array is:\n";
      for(int i=0;i<size;i++)
      {
    	 cout<<arr[i]<<" ";
      }
	
	return 0;

}
